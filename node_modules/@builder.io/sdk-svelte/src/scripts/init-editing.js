import { TARGET } from "../constants/target.js";
import { isBrowser } from "../functions/is-browser.js";
import { isEditing } from "../functions/is-editing.js";
import { register } from "../functions/register.js";
const registerInsertMenu = () => {
  register("insertMenu", {
    name: "_default",
    default: true,
    items: [
      { name: "Box" },
      { name: "Text" },
      { name: "Image" },
      { name: "Columns" },
      ...TARGET === "reactNative" ? [] : [
        { name: "Core:Section" },
        { name: "Core:Button" },
        { name: "Embed" },
        { name: "Custom Code" }
      ]
    ]
  });
};
const setupBrowserForEditing = () => {
  var _a;
  if (isBrowser()) {
    (_a = window.parent) == null ? void 0 : _a.postMessage({
      type: "builder.sdkInfo",
      data: {
        target: TARGET,
        supportsPatchUpdates: false
      }
    }, "*");
    window.addEventListener("message", ({ data }) => {
      var _a2, _b;
      if (data) {
        switch (data.type) {
          case "builder.evaluate": {
            const text = data.data.text;
            const args = data.data.arguments || [];
            const id = data.data.id;
            const fn = new Function(text);
            let result;
            let error = null;
            try {
              result = fn.apply(null, args);
            } catch (err) {
              error = err;
            }
            if (error) {
              (_a2 = window.parent) == null ? void 0 : _a2.postMessage({
                type: "builder.evaluateError",
                data: { id, error: error.message }
              }, "*");
            } else {
              if (result && typeof result.then === "function") {
                result.then((finalResult) => {
                  var _a3;
                  (_a3 = window.parent) == null ? void 0 : _a3.postMessage({
                    type: "builder.evaluateResult",
                    data: { id, result: finalResult }
                  }, "*");
                }).catch(console.error);
              } else {
                (_b = window.parent) == null ? void 0 : _b.postMessage({
                  type: "builder.evaluateResult",
                  data: { result, id }
                }, "*");
              }
            }
            break;
          }
        }
      }
    });
  }
};
if (isEditing()) {
  registerInsertMenu();
  setupBrowserForEditing();
}
