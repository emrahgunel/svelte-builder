var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
import { getGlobalThis } from "./get-global-this.js";
function getFetch() {
  return __async(this, null, function* () {
    const globalFetch = getGlobalThis().fetch;
    if (typeof globalFetch === "undefined" && typeof global !== "undefined") {
      const nodeFetch = import("node-fetch").then((d) => d.default);
      return nodeFetch;
    }
    return globalFetch;
  });
}
export {
  getFetch
};
