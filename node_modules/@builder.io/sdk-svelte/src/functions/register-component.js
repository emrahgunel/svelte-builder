var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { isBrowser } from "./is-browser.js";
const components = {};
function registerComponent(component, info) {
  var _a;
  components[info.name] = { component, info };
  if (isBrowser()) {
    const sendInfo = prepareComponentInfoToSend(info);
    (_a = window.parent) == null ? void 0 : _a.postMessage({
      type: "builder.registerComponent",
      data: sendInfo
    }, "*");
  }
  return component;
}
function prepareComponentInfoToSend(info) {
  return __spreadValues(__spreadValues({}, info), info.inputs && {
    inputs: info.inputs.map((input) => {
      const keysToConvertFnToString = ["onChange", "showIf"];
      for (const key of keysToConvertFnToString) {
        if (input[key] && typeof input[key] === "function") {
          const fn = input[key];
          input = __spreadProps(__spreadValues({}, input), {
            [key]: `return (${fn.toString()}).apply(this, arguments)`
          });
        }
      }
      return input;
    })
  });
}
export {
  components,
  registerComponent
};
