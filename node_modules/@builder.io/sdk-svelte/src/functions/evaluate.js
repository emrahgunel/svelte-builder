import { isBrowser } from "./is-browser.js";
import { isEditing } from "./is-editing.js";
function evaluate({
  code,
  context,
  state,
  event
}) {
  if (code === "") {
    console.warn("Skipping evaluation of empty code block.");
    return;
  }
  const builder = {
    isEditing: isEditing(),
    isBrowser: isBrowser(),
    isServer: !isBrowser()
  };
  const useReturn = !(code.includes(";") || code.includes(" return ") || code.trim().startsWith("return "));
  const useCode = useReturn ? `return (${code});` : code;
  try {
    return new Function("builder", "Builder", "state", "context", "event", useCode)(builder, builder, state, context, event);
  } catch (e) {
    console.warn("Builder custom code error: ", e);
  }
}
export {
  evaluate
};
