var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { evaluate } from "./evaluate.js";
import { set } from "./set.js";
import { transformBlock } from "./transform-block.js";
function getProcessedBlock(options) {
  const { state, context } = options;
  const block = transformBlock(options.block);
  if (!block.bindings) {
    return block;
  }
  const copied = __spreadProps(__spreadValues({}, block), {
    properties: __spreadValues({}, block.properties),
    actions: __spreadValues({}, block.actions)
  });
  for (const binding in block.bindings) {
    const expression = block.bindings[binding];
    const value = evaluate({
      code: expression,
      state,
      context
    });
    set(copied, binding, value);
  }
  return copied;
}
export {
  getProcessedBlock
};
